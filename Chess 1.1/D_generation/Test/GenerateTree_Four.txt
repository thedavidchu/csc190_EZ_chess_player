"""
def GenerateTree_Four(B,player,depth):
    """
    Current Board:
        3) Player,Max->Board_A
        2) !Player,Min->Board_B
        1) Player,Max->Board_C
        0) !Player,Min->Board_D

        Should there be a variable depth function?
            ie. if it's 5 layers, it'll do max,min,max,min,max
                elif 4 layers: it'll do max,min,max,min
            Or is that logically built in?
    """
    T=[] #T is potential moves
    move=0
    max_depth=3

    if depth==0: #Minimize score
        moves=[]
        for i in AllLegalMoves(B,player):
            moves+=[AnalyzePlayer(SimulateBoard(B,i),player)]
        return max(moves)

    elif player==10:
        for i in AllLegalMoves(B,10): #i is [initial,final]
            T+=[[i,-GenerateTree_Four(SimulateBoard(B,i),20,depth-1)]]
            if 

        if depth==max_depth:
            print(T)
            #return T #DEL
            maxm=[T[0]]
            for i in T:
                if i[1]>maxm[0][1]:
                    maxm=[i]
                elif maxm[0][1]==i[1]:
                    maxm+=i
            return maxm
        else:
            max_num=T[0][1]
            for i in T:
                if i[1]>max_num:
                    max_num=i[1]
            return max_num
        
    elif player==20:
        for i in AllLegalMoves(B,20): #i is [initial,final]
            T+=[[i,-GenerateTree_Four(SimulateBoard(B,i),10,depth-1)]]

        if depth==max_depth:
            print(T)
            #return T #DEL
            maxm=[T[0]]
            for i in T:
                if i[1]>maxm[0][1]:
                    maxm=[i]
                elif maxm[0][1]==i[1]:
                    maxm+=i
            return maxm
        else:
            max_num=T[0][1]
            for i in T:
                if i[1]>max_num:
                    max_num=i[1]
            return max_num
"""